<?xml version="1.0" encoding="utf-8" standalone="no"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="2.5"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">

	<!-- Guice filter for injection of Requests, Responses, ServletContexts etc. -->
	<filter>
		<filter-name>guice-filter</filter-name>
		<filter-class>com.google.inject.servlet.GuiceFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>guice-filter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!--	Our ServletContextListener, used for bootstrapping the Guice modules, and so needed for
			all other filters/servlets/controllers and everything to inject -->
	<listener>
		<listener-class>de.tilliwilli.phantasien.app.PhantasienServletContextListener</listener-class>
	</listener>

	<!--	Although almost everything should be processed within our ContextListener, security setup for GAE
			is most easily done with <security-constraint>s here, and Guice Servlets don't support setting
			these up in Java -->
	<security-constraint>
		<!--	Filter ALL web-pages, so every access to our app is only allowed for users that are logged in -->
		<web-resource-collection>
			<web-resource-name>everything</web-resource-name>
			<url-pattern>/*</url-pattern>
		</web-resource-collection>

		<!-- Allow all users: normal ones and admins (it still means that a user has to be logged in) -->
		<auth-constraint>
			<role-name>*</role-name>
		</auth-constraint>
		
		<!-- Our whole application should use HTTPS -->
<!-- 		<user-data-constraint> -->
<!-- 			<transport-guarantee>CONFIDENTIAL</transport-guarantee> -->
<!-- 		</user-data-constraint> -->
	</security-constraint>

</web-app>
<?xml version="1.0" encoding="utf-8" standalone="no"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="2.5"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">

	<context-param>
		<param-name>contextClass</param-name>
		<param-value>org.springframework.web.context.support.AnnotationConfigWebApplicationContext</param-value>
	</context-param>

	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>de.tilliwilli.phantasien</param-value>
	</context-param>

	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	
	  <!-- Declare a Spring MVC DispatcherServlet as usual -->
	<servlet>
		<servlet-name>dispatcher</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
      <!-- Configure DispatcherServlet to use AnnotationConfigWebApplicationContext
           instead of the default XmlWebApplicationContext -->
		<init-param>
			<param-name>contextClass</param-name>
			<param-value>org.springframework.web.context.support.AnnotationConfigWebApplicationContext</param-value>
		</init-param>
      <!-- Again, config locations must consist of one or more comma- or space-delimited
           and fully-qualified @Configuration classes -->
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>de.tilliwilli.phantasien.controllers</param-value>
		</init-param>
	</servlet>

  <!-- map all requests for /app/* to the dispatcher servlet -->
	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<url-pattern>/*</url-pattern>
	</servlet-mapping>

	<!--	Although almost everything should be processed within our ContextListener, security setup for GAE
			is most easily done with <security-constraint>s here, and Guice Servlets don't support setting
			these up in Java -->
<!-- 	<security-constraint> -->
		<!--	Filter ALL web-pages, so every access to our app is only allowed for users that are logged in -->
<!-- 		<web-resource-collection> -->
<!-- 			<web-resource-name>everything</web-resource-name> -->
<!-- 			<url-pattern>/*</url-pattern> -->
<!-- 		</web-resource-collection> -->

		<!-- Allow all users: normal ones and admins (it still means that a user has to be logged in) -->
<!-- 		<auth-constraint> -->
<!-- 			<role-name>*</role-name> -->
<!-- 		</auth-constraint> -->
		
		<!-- Our whole application should use HTTPS -->
<!-- 		<user-data-constraint> -->
<!-- 			<transport-guarantee>CONFIDENTIAL</transport-guarantee> -->
<!-- 		</user-data-constraint> -->
<!-- 	</security-constraint> -->

</web-app>